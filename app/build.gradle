plugins {
    id "com.cookpad.android.plugin.license-tools" version "1.2.2"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

// Force latest version of Jacoco, initially done to resolve https://github.com/jacoco/jacoco/issues/1155
jacoco.toolVersion = "0.8.7"


android {

    compileSdkVersion 31
    buildToolsVersion '31.0.0'
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
    defaultConfig {
        applicationId "org.pixeldroid.app"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode 9
        versionName "1.0.beta$versionCode"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }
    sourceSets {
        main.java.srcDirs += 'src/main/java'
        test.java.srcDirs += 'src/test/java'
        staging.res.srcDirs += 'src/debug/res'
        androidTest.java.srcDirs += 'src/androidTest/java'
    }
    testBuildType "staging"

    buildTypes {
        debug {
                applicationIdSuffix '.debug'
                versionNameSuffix "-debug"
        }
        staging {
            initWith debug
            testCoverageEnabled true

            // These values are first looked for in the env variables, and, if not found there,
            // in the local.properties file (which is not checked into version control of course!).

            // If you are not running the integration tests, you can just set them to dummy values
            // in local.properties or comment the buildConfigField lines

            def localProperties = new Properties()
            if (rootProject.file("local.properties").exists()) {
                localProperties.load(new FileInputStream(rootProject.file("local.properties")))
            }

            buildConfigField "String", "USER_ID", System.getenv("USER_ID") ?: localProperties['USER_ID'] ?: '""'
            buildConfigField "String", "INSTANCE_URI", System.getenv("INSTANCE_URI") ?: localProperties['INSTANCE_URI'] ?: '""'
            buildConfigField "String", "ACCESS_TOKEN", System.getenv("ACCESS_TOKEN") ?: localProperties['ACCESS_TOKEN'] ?: '""'
            buildConfigField "String", "REFRESH_TOKEN", System.getenv("REFRESH_TOKEN") ?: localProperties['REFRESH_TOKEN'] ?: '""'
            buildConfigField "String", "CLIENT_ID", System.getenv("CLIENT_ID") ?: localProperties['CLIENT_ID'] ?: '""'
            buildConfigField "String", "CLIENT_SECRET", System.getenv("CLIENT_SECRET") ?: localProperties['CLIENT_SECRET'] ?: '""'
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles 'proguard-rules.pro'
        }
    }
    /**
     * Make a string with the application_id (available in xml etc)
     */
    android.applicationVariants.all { variant ->
        variant.resValue 'string', 'application_id', variant.applicationId
    }


    testOptions {
        animationsDisabled true

    }
    buildFeatures {
        viewBinding true
        dataBinding = true
    }

    apply plugin: 'kotlin-kapt'
    lint {
        disable 'MissingTranslation'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    /**
     * AndroidX dependencies:
     */
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'
    implementation "androidx.browser:browser:1.4.0"
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'
    implementation 'androidx.paging:paging-runtime-ktx:3.1.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:2.4.1'
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.1"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.4.1"
    implementation "androidx.annotation:annotation:1.3.0"
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation "androidx.activity:activity-ktx:1.4.0"
    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    implementation 'androidx.work:work-runtime-ktx:2.7.1'
    implementation 'androidx.media2:media2-widget:1.2.1'
    implementation 'androidx.media2:media2-player:1.2.1'


    // Use the most recent version of CameraX
    def cameraX_version = '1.1.0-beta02'
    implementation "androidx.camera:camera-core:$cameraX_version"
    implementation "androidx.camera:camera-camera2:$cameraX_version"
    // CameraX Lifecycle library
    implementation "androidx.camera:camera-lifecycle:$cameraX_version"

    // CameraX View class
    implementation "androidx.camera:camera-view:$cameraX_version"

    def room_version = "2.4.2"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    implementation "androidx.room:room-paging:$room_version"

    /**
     * End of AndroidX section
     * ----------------------------------------------------------
     */


    implementation 'com.google.android.material:material:1.5.0'

    //Dagger (dependency injection)
    implementation 'com.google.dagger:dagger-android:2.40.5'
    implementation 'com.google.dagger:dagger-android-support:2.40.5'
    // if you use the support libraries
    kapt 'com.google.dagger:dagger-android-processor:2.40.5'
    kapt 'com.google.dagger:dagger-compiler:2.40.5'

    implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'
    implementation 'io.reactivex.rxjava3:rxjava:3.1.3'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation 'com.github.connyduck:sparkbutton:4.1.0'


    implementation 'info.androidhive:imagefilters:1.0.7'
    implementation 'com.github.yalantis:ucrop:2.2.6-native'

    implementation('com.github.bumptech.glide:glide:4.12.0') {
        exclude group: "com.android.support"
    }

    implementation 'com.github.bumptech.glide:okhttp-integration:4.12.0'
    implementation('com.github.bumptech.glide:recyclerview-integration:4.12.0') {
        // Excludes the support library because it's already included by Glide.
        transitive = false
    }
    kapt 'com.github.bumptech.glide:compiler:4.12.0'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'com.mikepenz:materialdrawer:8.4.4'
    // Add for NavController support
    implementation 'com.mikepenz:materialdrawer-nav:8.4.4'

    //iconics
    implementation 'com.mikepenz:iconics-core:5.3.3'
    implementation 'com.mikepenz:materialdrawer-iconics:8.4.2'
    implementation 'com.mikepenz:iconics-views:5.3.3'
    implementation 'com.mikepenz:google-material-typeface:4.0.0.2-kotlin@aar'


    implementation 'com.karumi:dexter:6.2.3'

    implementation 'com.github.ligi:tracedroid:4.1'

    implementation 'me.relex:circleindicator:2.1.6'

    /**
     * Not in release, so not mentioned in licenses list
     */

    //stagingImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

    androidTestImplementation 'androidx.work:work-testing:2.7.1'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.32.0'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
    testImplementation 'junit:junit:4.13.2'
    testImplementation "androidx.room:room-testing:$room_version"


    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.2'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.9.0'

}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}


task jacocoTestReport(type: JacocoReport, dependsOn: ['connectedStagingAndroidTest', 'testStagingUnitTest', 'createStagingCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/staging", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"
    getSourceDirectories().from(files([mainSrc]))
    getClassDirectories().from(files([kotlinTree]))
    getExecutionData().from(fileTree(dir: project.buildDir, includes: [

            'outputs/code_coverage/stagingAndroidTest/connected/*coverage.ec',

            'jacoco/testStagingUnitTest.exec'

    ]))
}
